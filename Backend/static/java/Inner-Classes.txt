Inner Classes -> inner class ek aisi class hai jo ek class ya method ya block ke andar define ki jati hai use inner class kahate hai 

-> inner class me sare Modifiers kam karate hai 
-> inner class ko private bhi kar sakate ho 
-> inner class ko static bhi bana sakate ho 
-> inner class private hone par bhi Constructor call hoga 
-> inner class me bhi Constructor hote hai
-> Inner class ka instance tabhi create ho sakta hai jab outer class ka object ho.
-> static inner class me koi jarurat nahi ki outer ka object ho bina outer ke object ke bane bhi object ban jatega 

-> outer class ko private static nahi banaya ja sakata jabki inner class ko banaya ja sakata hai 

---------------------------------------------------------
private inner class -> 

class Temp {
    static int count = 20;

    private class A{
        A(){
            System.out.println("Hello");
        }
        void display(){
            System.out.println("hii");
        }
    }
    A obj =  new  A();
    
    public static void main(String[] args) {
        new Temp().obj.display();
       // A obj =  new  A();//error outside object create private class 
        
    }
}

output -> 
        Hello
        hii


-----------------------------------------------------------------

Member Inner Class ->
            Ye class outer class ke andar, kisi method ke bahar defined hoti hai.
            Ye class outer class ke private members ko bhi access kar sakti hai.
            Inner class ka instance tabhi create ho sakta hai jab outer class ka object ho.


class Outer {
    private int data = 10;
    
    class Inner {
        void display() {
            System.out.println("Data: " + data);
        }
    }
}

public class Temp {
    public static void main(String[] args) {
        Outer outer = new Outer();
        Outer.Inner inner = outer.new Inner();
        inner.display();
    }
}

output -> Data: 10

------------------------------------------------------------

2. Static Nested Class -> 
           -> Ye class outer class ke andar static keyword ke saath defined hoti hai.
           -> Static inner class ko bina outer class ke object ke bhi instantiate kiya ja sakta hai.
           -> Static inner class ko outer class ke non-static members access nahi kar sakti.

class Outer {
    static int data = 20;
    int a = 10;
    
    static class Inner {
        void display() {
            System.out.println("Data: " + data);
            //System.out.println(a);// error none static variable
        }
    }
}

public class Temp {
    public static void main(String[] args) {
        Outer.Inner inner = new Outer.Inner();
        inner.display();
    }
}


-----------------------------------------------------------------

3. Local Inner Class -> 
                -> Ye class kisi method ya block ke andar define hoti hai.
                -> Iska use sirf us method/block ke andar hi kiya ja sakta hai.
                -> Ye class method ke effectively final local variables ko access kar sakti hai.


class Outer {
    void outerMethod() {
        int num = 5;  // effectively final
        
        class Inner {
            void display() {
                System.out.println("Num: " + num);
            }
        }
        Inner inner = new Inner();
        inner.display();
    }
}

public class Temp {
    public static void main(String[] args) {
        Outer outer = new Outer();
        outer.outerMethod();
    }
}

output -> Num: 5


-----------------------------------------------------

Anonymous Inner Class ->
                    -> Ye ek aisi class hoti hai jiska koi naam nahi hota. Ye class object creation ke waqt hi define ki jaati hai.
                    -> Ye mostly interface ko implement karne ya class ko extend karne ke liye use hoti hai.


interface Hello {
    void greet();
}

class Outer {
    public static void main(String[] args) {
        Hello hello = new Hello() {
            public void greet() {
                System.out.println("Hello, world!");
            }
        };
        hello.greet();
    }
}



-------------------------------------------------------------------------

interface inner class -> interface me bhi inner class bana sakate hai 
-> iska default modifier public aur static hota hai 
-> inner class ko public static abstract bana sakate ho 
-> interface me inner class ko private protected modifier nahi laga sakate 


interface ke inner class ko private ku nahi bana sakate -> interface ke inner class ko private is liye bana sakate ku ki private hone par outer class yani interface me hi object ban pata inner class ka aur agar aisa hota to interface ke functionality kharab hoti aur interface ka main purpose kharab hota is waja se nahi banaya jata aur static ki waja se ku ki interface kahata hai mere andar ke sare eliments globliy access hai aur ise sub class me use kiya ja sakata hai par private hone se aisa nahi hota 


interface A {

    class inner {
        void show(){
            System.out.println("show");
        }

        void display(){
            System.out.println("display");
        }

    }
}


class Temp {
    
    public static void main(String[] args) {
        A.inner obj = new A.inner();
        obj.display();
        obj.show();
    }
}









